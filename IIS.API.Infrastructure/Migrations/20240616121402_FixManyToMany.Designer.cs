// <auto-generated />
using System;
using IIS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IIS.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240616121402_FixManyToMany")]
    partial class FixManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseService", b =>
                {
                    b.Property<Guid>("CasesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CasesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("CaseService");
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 16, 12, 14, 0, 331, DateTimeKind.Utc).AddTicks(8679));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e"),
                            Author = "Author 1",
                            Date = new DateTime(2024, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(9277),
                            Description = "Description 1",
                            Email = "email1@gmail.com",
                            NormalizedEmail = "email1@gmail.com",
                            PhoneNumber = "+375 (29) 111-11-11"
                        },
                        new
                        {
                            Id = new Guid("afb6a935-00ce-45fc-95b6-5f807d92a95e"),
                            Author = "Author 2",
                            Date = new DateTime(2024, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(9281),
                            Description = "Description 2",
                            Email = "email2@gmail.com",
                            NormalizedEmail = "email2@gmail.com",
                            PhoneNumber = "+375 (29) 222-22-22"
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cases", (string)null);
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faqs", (string)null);
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36f010ed-8c38-4eeb-b9ec-5fb86ccf3189"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 1",
                            UserId = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e")
                        },
                        new
                        {
                            Id = new Guid("16a79d25-a4f4-4cf0-99ec-835073f0c946"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 2",
                            UserId = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e")
                        },
                        new
                        {
                            Id = new Guid("03b061d4-2aca-44c8-8489-c92390e21cd5"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 3",
                            UserId = new Guid("afb6a935-00ce-45fc-95b6-5f807d92a95e")
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Serveces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("61797f27-487a-4f72-a18b-a1cfee931bc1"),
                            Complexity = 5,
                            Cost = 159m,
                            Description = "description 1",
                            Name = "service 1"
                        },
                        new
                        {
                            Id = new Guid("aaf60a41-acfe-4a53-96b9-2e007099633e"),
                            Complexity = 3,
                            Cost = 109m,
                            Description = "description 2",
                            Name = "service 2"
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail", "Password")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e"),
                            City = "City 1",
                            Country = "Country 1",
                            DateOfBirth = new DateTime(2004, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(4945),
                            Email = "email1@gmail.com",
                            Gender = 1,
                            Name = "Name 1",
                            NormalizedEmail = "email1@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 1",
                            PhoneNumber = "+375 (29) 111-11-11",
                            Surname = "Surname 1"
                        },
                        new
                        {
                            Id = new Guid("afb6a935-00ce-45fc-95b6-5f807d92a95e"),
                            City = "City 2",
                            Country = "Country 2",
                            DateOfBirth = new DateTime(1974, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(4963),
                            Email = "email2@gmail.com",
                            Gender = 2,
                            Name = "Name 2",
                            NormalizedEmail = "email2@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 2",
                            PhoneNumber = "+375 (29) 222-22-22",
                            Surname = "Surname 2"
                        });
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicesId", "SpecialistsId");

                    b.HasIndex("SpecialistsId");

                    b.ToTable("ServiceSpecialist");
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Specialist", b =>
                {
                    b.HasBaseType("IIS.API.Domain.Entities.User");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Specialist");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8123-f170-46de-ac5f-5a7f59f2103e"),
                            City = "City 3",
                            Country = "Country 3",
                            DateOfBirth = new DateTime(2004, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(9450),
                            Email = "email3@gmail.com",
                            Gender = 1,
                            Name = "Name 3",
                            NormalizedEmail = "email3@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 3",
                            PhoneNumber = "+375 (29) 333-33-33",
                            Surname = "Surname 3",
                            Position = "Position 1"
                        },
                        new
                        {
                            Id = new Guid("45bf8340-f203-46de-ac5f-5a7f59f2103e"),
                            City = "City 4",
                            Country = "Country 4",
                            DateOfBirth = new DateTime(1974, 6, 16, 15, 14, 0, 331, DateTimeKind.Local).AddTicks(9454),
                            Email = "email4@gmail.com",
                            Gender = 2,
                            Name = "Name 4",
                            NormalizedEmail = "email4@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 4",
                            PhoneNumber = "+375 (29) 444-44-44",
                            Surname = "Surname 4",
                            Position = "Position 2"
                        });
                });

            modelBuilder.Entity("CaseService", b =>
                {
                    b.HasOne("IIS.API.Domain.Entities.Case", null)
                        .WithMany()
                        .HasForeignKey("CasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIS.API.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Review", b =>
                {
                    b.HasOne("IIS.API.Domain.Entities.Case", null)
                        .WithMany("Rewiews")
                        .HasForeignKey("CaseId");

                    b.HasOne("IIS.API.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.HasOne("IIS.API.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIS.API.Domain.Entities.Specialist", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Case", b =>
                {
                    b.Navigation("Rewiews");
                });
#pragma warning restore 612, 618
        }
    }
}
