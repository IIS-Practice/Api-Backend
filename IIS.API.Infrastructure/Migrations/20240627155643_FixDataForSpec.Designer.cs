// <auto-generated />
using System;
using IIS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IIS.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240627155643_FixDataForSpec")]
    partial class FixDataForSpec
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseService", b =>
                {
                    b.Property<Guid>("CasesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CasesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("CaseService");
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 27, 15, 56, 43, 151, DateTimeKind.Utc).AddTicks(6987));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e"),
                            Author = "Author 1",
                            Date = new DateTime(2024, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(7559),
                            Description = "Description 1",
                            Email = "email1@gmail.com",
                            NormalizedEmail = "email1@gmail.com",
                            PhoneNumber = "+375 (29) 111-11-11"
                        },
                        new
                        {
                            Id = new Guid("afb6a935-00ce-45fc-95b6-5f807d92a95e"),
                            Author = "Author 2",
                            Date = new DateTime(2024, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(7562),
                            Description = "Description 2",
                            Email = "email2@gmail.com",
                            NormalizedEmail = "email2@gmail.com",
                            PhoneNumber = "+375 (29) 222-22-22"
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagesUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Complexity = 5,
                            Cost = 1400m,
                            Description = "Description 1",
                            EndDate = new DateTime(2024, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6049),
                            ImagesUri = "[]",
                            Name = "Name 1",
                            StartDate = new DateTime(2024, 1, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6045)
                        },
                        new
                        {
                            Id = new Guid("36f056ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Complexity = 8,
                            Cost = 3500m,
                            Description = "Description 2",
                            EndDate = new DateTime(2024, 4, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6053),
                            ImagesUri = "[]",
                            Name = "Name 2",
                            StartDate = new DateTime(2023, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6052)
                        },
                        new
                        {
                            Id = new Guid("15f010ed-8c38-4eeb-b9ec-5fb36ccf3189"),
                            Complexity = 2,
                            Cost = 500m,
                            Description = "Description 3",
                            EndDate = new DateTime(2024, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6056),
                            ImagesUri = "[]",
                            Name = "Name 3",
                            StartDate = new DateTime(2024, 5, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(6056)
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faqs", (string)null);
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36f010ed-8c38-4eeb-b9ec-5fb86ccf3189"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 1",
                            Username = "Bobik"
                        },
                        new
                        {
                            Id = new Guid("16a79d25-a4f4-4cf0-99ec-835073f0c946"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 2",
                            Username = "Vasula"
                        },
                        new
                        {
                            Id = new Guid("03b061d4-2aca-44c8-8489-c92390e21cd5"),
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "This is review 3",
                            Username = "Volodia"
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Serveces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ad04c11-3270-4a84-af1d-a8b2c37985be"),
                            Complexity = 5,
                            Cost = 159m,
                            Description = "description 1",
                            Name = "service 1"
                        },
                        new
                        {
                            Id = new Guid("abd9cb6a-1506-4c1b-9719-42d400759934"),
                            Complexity = 3,
                            Cost = 109m,
                            Description = "description 2",
                            Name = "service 2"
                        });
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail", "Password")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8340-f170-46de-ac5f-5a7f59f2103e"),
                            City = "City 1",
                            Country = "Country 1",
                            DateOfBirth = new DateTime(2004, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(4068),
                            Email = "email1@gmail.com",
                            Gender = 1,
                            Name = "Name 1",
                            NormalizedEmail = "email1@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 1",
                            PhoneNumber = "+375 (29) 111-11-11",
                            Surname = "Surname 1"
                        },
                        new
                        {
                            Id = new Guid("afb6a935-00ce-45fc-95b6-5f807d92a95e"),
                            City = "City 2",
                            Country = "Country 2",
                            DateOfBirth = new DateTime(1974, 6, 27, 18, 56, 43, 151, DateTimeKind.Local).AddTicks(4086),
                            Email = "email2@gmail.com",
                            Gender = 2,
                            Name = "Name 2",
                            NormalizedEmail = "email2@gmail.com",
                            Password = "Qq12345678qQ",
                            Patronymic = "Patronymic 2",
                            PhoneNumber = "+375 (29) 222-22-22",
                            Surname = "Surname 2"
                        });
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicesId", "SpecialistsId");

                    b.HasIndex("SpecialistsId");

                    b.ToTable("ServiceSpecialist");
                });

            modelBuilder.Entity("IIS.API.Domain.Entities.Specialist", b =>
                {
                    b.HasBaseType("IIS.API.Domain.Entities.User");

                    b.Property<string>("CvUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Specialist");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf8123-f170-46de-ac5f-5a7f59f2103e"),
                            City = "Аттава",
                            Country = "Канада",
                            DateOfBirth = new DateTime(1964, 9, 2, 22, 20, 25, 988, DateTimeKind.Local),
                            Email = "kiany@gmail.com",
                            Gender = 1,
                            Name = "Киану",
                            NormalizedEmail = "Kiany@gmail.com",
                            Password = "Kiany123",
                            Patronymic = "Чарьзович",
                            PhoneNumber = "+375 (29) 111-22-33",
                            Surname = "Ривз",
                            Description = "Я Киану Ривз, дитя EPAMа занимаюсь разработкой 25 лет",
                            Position = "Разработчик"
                        },
                        new
                        {
                            Id = new Guid("1b6cfca3-96cf-4d5f-a1d4-12b8a00e8f7b"),
                            City = "Брауард",
                            Country = "США",
                            DateOfBirth = new DateTime(1998, 1, 23, 21, 20, 25, 988, DateTimeKind.Local),
                            Email = "jahseh@gmail.com",
                            Gender = 1,
                            Name = "Джасей",
                            NormalizedEmail = "jahseh@gmail.com",
                            Password = "Jahseh123",
                            Patronymic = "Рикардо",
                            PhoneNumber = "+375 (29) 111-22-34",
                            Surname = "Дуэйн",
                            Description = "Стажер, клянусь своей жизнью, что сделаю вам офигительного бота",
                            Position = "Разработчик"
                        },
                        new
                        {
                            Id = new Guid("f39abfe8-786f-4b3a-8d86-4d684e729aa6"),
                            City = "Тобольск",
                            Country = "Россия",
                            DateOfBirth = new DateTime(2000, 5, 11, 22, 20, 25, 988, DateTimeKind.Local),
                            Email = "darya@gmail.com",
                            Gender = 2,
                            Name = "Дарья",
                            NormalizedEmail = "darya@gmail.com",
                            Password = "Darya123",
                            Patronymic = "Евгеньевна",
                            PhoneNumber = "+375 (29) 111-22-44",
                            Surname = "Зотеева",
                            Description = "За деньги да, мечу на главного бизнес-аналитика",
                            Position = "Аналитик"
                        },
                        new
                        {
                            Id = new Guid("bd50b4c5-98ab-4d2b-974d-07e53c3cb627"),
                            City = "Лейпциг",
                            Country = "ГДР",
                            DateOfBirth = new DateTime(1989, 9, 1, 22, 20, 25, 988, DateTimeKind.Local),
                            Email = "bill@gmail.com",
                            Gender = 1,
                            Name = "Билл",
                            NormalizedEmail = "bill@gmail.com",
                            Password = "Bill1234",
                            Patronymic = "Симонович",
                            PhoneNumber = "+375 (29) 111-22-45",
                            Surname = "Каулиц",
                            Description = "Коллаборацию с McDonald's сделал и дизайн в figma сделаю",
                            Position = "Дизайнер"
                        },
                        new
                        {
                            Id = new Guid("e8b52180-e2e0-4461-9bf3-372d19d5f28c"),
                            City = "Сан-Фернандо",
                            Country = "США",
                            DateOfBirth = new DateTime(2003, 11, 1, 21, 20, 25, 988, DateTimeKind.Local),
                            Email = "eli@gmail.com",
                            Gender = 1,
                            Name = "Илай",
                            NormalizedEmail = "eli@gmail.com",
                            Password = "Eli12345",
                            Patronymic = "Ястребович",
                            PhoneNumber = "+375 (29) 111-33-11",
                            Surname = "Московиц",
                            Description = "Могу отмудохать вам дизайн или лицо. Стаж 2 года",
                            Position = "Дизайнер"
                        },
                        new
                        {
                            Id = new Guid("6d028d9d-9378-4db4-8d87-35b7f3d8d973"),
                            City = "Мистик-Фоллс",
                            Country = "США",
                            DateOfBirth = new DateTime(1993, 10, 31, 21, 20, 25, 988, DateTimeKind.Local),
                            Email = "bonbon@gmail.com",
                            Gender = 2,
                            Name = "Бонни",
                            NormalizedEmail = "bonbon@gmail.com",
                            Password = "Bon12345",
                            Patronymic = "Ведьмовна",
                            PhoneNumber = "+375 (33) 666-66-66",
                            Surname = "Беннет",
                            Description = "Если вам не понравится, наведу порчу на понос))",
                            Position = "Разработчик"
                        },
                        new
                        {
                            Id = new Guid("ae41a12f-3c43-4a6e-b1b1-5452e676ed98"),
                            City = "Пикалево",
                            Country = "Россия",
                            DateOfBirth = new DateTime(1973, 9, 7, 22, 20, 25, 988, DateTimeKind.Local),
                            Email = "michail@gmail.com",
                            Gender = 1,
                            Name = "Михаил",
                            NormalizedEmail = "michail@gmail.com",
                            Password = "Michail1",
                            Patronymic = "Юрьевич",
                            PhoneNumber = "+375 (29) 777-77-77",
                            Surname = "Горшенёв",
                            Description = "Старший дизайнер, стаж 20 лет. Сделаю живой дизайн",
                            Position = "Дизайнер"
                        },
                        new
                        {
                            Id = new Guid("cdff6b4b-4a2a-4927-b9e5-80154f893539"),
                            City = "Краснодар",
                            Country = "Россия",
                            DateOfBirth = new DateTime(1995, 7, 25, 22, 20, 25, 988, DateTimeKind.Local),
                            Email = "Olesya@gmail.com",
                            Gender = 2,
                            Name = "Олеся",
                            NormalizedEmail = "olesya@gmail.com",
                            Password = "Olesya2345",
                            Patronymic = "Игоревна",
                            PhoneNumber = "+375 (44) 375-73-96",
                            Surname = "Иванченко",
                            Description = "Проект будет готов к 32 числу месяца",
                            Position = "Разработчик"
                        },
                        new
                        {
                            Id = new Guid("6a422a99-b975-485f-a95e-c1449a4d3622"),
                            City = "Ленинград",
                            Country = "Россия",
                            DateOfBirth = new DateTime(1991, 11, 5, 21, 20, 25, 988, DateTimeKind.Local),
                            Email = "Ksenia@gmail.com",
                            Gender = 2,
                            Name = "Ксения",
                            NormalizedEmail = "ksenia@gmail.com",
                            Password = "Ksenia2345",
                            Patronymic = "Анатольевна",
                            PhoneNumber = "+375 (44) 947-83-63",
                            Surname = "Собчак",
                            Description = "Думаете как старший аналитик я не смогу справиться с вашим заказом? Да я даже в президенты баллотировалась",
                            Position = "Аналитик"
                        });
                });

            modelBuilder.Entity("CaseService", b =>
                {
                    b.HasOne("IIS.API.Domain.Entities.Case", null)
                        .WithMany()
                        .HasForeignKey("CasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIS.API.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.HasOne("IIS.API.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIS.API.Domain.Entities.Specialist", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
